services:
  pg:
    container_name: pg
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      SECRET_COOKIE: ${SECRET_COOKIE}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      # Use a named volume for persistent data. This is correct.
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "max_connections=200", "-p ${POSTGRES_PORT}"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5

  react:
    container_name: react
    build:
      context: .
      dockerfile: ./playground/Dockerfile.dev
    environment:
      VITE_NODE_ENV: ${VITE_NODE_ENV}
      VITE_PROD_URL: ${VITE_PROD_URL}
    volumes:
      # Bind mount the app code from host to container
      - ./playground/:/app
      # Use an anonymous volume to prevent host's node_modules from being used
      - /app/node_modules

  factory:
    container_name: factory
    build:
      context: .
      dockerfile: ./factory/Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
      STARTUP_DELAY: 5
    depends_on:
      - pg
    volumes:
      # These are correct bind mounts for your application code and logs.
      - ./factory/:/usr/src/app
      - ./factory/logs:/usr/src/app/logs
      # Use an anonymous volume to prevent host's node_modules from being used
      - /usr/src/app/node_modules
      - ./playground/dist:/usr/src/app/dist
      # REMOVED: - ./postgres_data  <-- This was the source of the conflict.
    ports:
      - "5678:5678"
    links:
      - pg
    networks:
      - default

volumes:
  # This named volume is for PostgreSQL data persistence only.
  # It is managed by Docker, avoiding host permission issues.
  postgres_data: {}

networks:
  default:
    name: levelup_default
